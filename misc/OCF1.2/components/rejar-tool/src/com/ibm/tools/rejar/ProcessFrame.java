/*
 * Copyright © 1997 - 1999 IBM Corporation.
 * 
 * Redistribution and use in source (source code) and binary (object code)
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 * 1. Redistributed source code must retain the above copyright notice, this
 * list of conditions and the disclaimer below.
 * 2. Redistributed object code must reproduce the above copyright notice,
 * this list of conditions and the disclaimer below in the documentation
 * and/or other materials provided with the distribution.
 * 3. The name of IBM may not be used to endorse or promote products derived
 * from this software or in any other form without specific prior written
 * permission from IBM.
 * 4. Redistribution of any modified code must be labeled "Code derived from
 * the original OpenCard Framework".
 * 
 * THIS SOFTWARE IS PROVIDED BY IBM "AS IS" FREE OF CHARGE. IBM SHALL NOT BE
 * LIABLE FOR INFRINGEMENTS OF THIRD PARTIES RIGHTS BASED ON THIS SOFTWARE.  ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IBM DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THIS
 * SOFTWARE WILL MEET THE USER'S REQUIREMENTS OR THAT THE OPERATION OF IT WILL
 * BE UNINTERRUPTED OR ERROR-FREE.  IN NO EVENT, UNLESS REQUIRED BY APPLICABLE
 * LAW, SHALL IBM BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  ALSO, IBM IS UNDER NO OBLIGATION
 * TO MAINTAIN, CORRECT, UPDATE, CHANGE, MODIFY, OR OTHERWISE SUPPORT THIS
 * SOFTWARE.
 */
 
package com.ibm.tools.rejar;

import java.awt.*;
import java.io.*;
import java.util.*;

public class ProcessFrame extends Frame
{
	public ProcessFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(0,0));
		setVisible(false);
		setSize(492,345);
		commandPanel = new java.awt.Panel();
		commandPanel.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		commandPanel.setBounds(0,312,492,33);
		add("South", commandPanel);
		cancelButton = new java.awt.Button();
		cancelButton.setLabel("Cancel");
		cancelButton.setVisible(false);
		cancelButton.setBounds(201,5,53,23);
		cancelButton.setBackground(new Color(12632256));
		commandPanel.add(cancelButton);
		okButton = new java.awt.Button();
		okButton.setLabel("OK");
		okButton.setBounds(259,5,31,23);
		okButton.setBackground(new Color(12632256));
		commandPanel.add(okButton);
		infoPanel = new java.awt.Panel();
		infoPanel.setLayout(new CardLayout(0,0));
		infoPanel.setBounds(0,0,492,312);
		add("Center", infoPanel);
		protocolField = new java.awt.TextArea();
		protocolField.setBounds(0,0,492,312);
		infoPanel.add("card1", protocolField);
		((CardLayout) infoPanel.getLayout()).show(infoPanel,"card1");
		setTitle("create JAR file");
		//}}
		
		

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
//		SymWindow aSymWindow = new SymWindow();
//		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		SymContainer aSymContainer = new SymContainer();
		commandPanel.addContainerListener(aSymContainer);
		//}}
	}

	public ProcessFrame(String title)
	{
		this();
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}
	
	public void makeNewJarFile(String sourcePath, String destinationArchive, String[] inputArchives)
	{
		setVisible(true);
		cancelButton.setVisible(true);
		okButton.setVisible(false);
	    
	    Vector inputFiles = new Vector();
	    final File outputFile = new File(destinationArchive);

        for (int i=0; i<inputArchives.length; i++) {
            File f = new File(sourcePath, inputArchives[i]);
            if (f.isFile())
                inputFiles.addElement(f);
        }

        if (inputFiles.size() > 0) {
            final File[] inputFiles1 = new File[inputFiles.size()];
            inputFiles.copyInto(inputFiles1);
            Thread t = new Thread() {            
                public void run() {
                    JarFile.copyJar2Jar(new PrintWriter(new ProtocolOutputStream()) ,
                    outputFile, 
                    inputFiles1);
                }
            };
            t.start();
        }
        cancelButton.setVisible(false);
        okButton.setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Panel commandPanel;
	java.awt.Button cancelButton;
	java.awt.Button okButton;
	java.awt.Panel infoPanel;
	java.awt.TextArea protocolField;
	//}}

	//{{DECLARE_MENUS
	//}}
/*
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == processFrame.this)
				Frame1_WindowClosing(event);
		}
		Frame1_WindowClosing(event);
	}
*/
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
			else if (object == cancelButton)
				cancelButton_ActionPerformed(event);
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		//}}
			 
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}

	void cancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Enable the Button
		okButton.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Disable the Button
		cancelButton.setEnabled(false);
		//}}
	}

	class SymContainer extends java.awt.event.ContainerAdapter
	{
		public void componentAdded(java.awt.event.ContainerEvent event)
		{
			Object object = event.getSource();
			if (object == commandPanel)
				commandPanel_ComponentAdded(event);
		}
	}

	void commandPanel_ComponentAdded(java.awt.event.ContainerEvent event)
	{
		// to do: code goes here.
	}

	class ProtocolOutputStream extends OutputStream {
	    private byte[] buf = new byte[512];
	    private int buflen = 0;
	    
	    public void write(int b) throws IOException {
	        buf[buflen++] = (byte)b;
	        if (b == '\n') {
	          protocolField.append(new String(buf, 0, buflen));
	          buflen = 0;
	        }
	    }
	}
}
