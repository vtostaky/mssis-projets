head	2.0;
access;
symbols;
locks
	root:2.0; strict;
comment	@# @;


2.0
date	2001.06.14.13.32.36;	author root;	state Exp;
branches;
next	1.99;

1.99
date	2001.06.14.13.13.36;	author root;	state Exp;
branches;
next	1.0;

1.0
date	2001.06.14.09.12.45;	author root;	state Exp;
branches;
next	;


desc
@PC/SC CardTerminal Factoru
@


2.0
log
@Distributed V2 with long APDU support. Added support for <space> in names.
@
text
@/*
 * Copyright © 1997 - 1999 IBM Corporation.
 * 
 * Redistribution and use in source (source code) and binary (object code)
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 * 1. Redistributed source code must retain the above copyright notice, this
 * list of conditions and the disclaimer below.
 * 2. Redistributed object code must reproduce the above copyright notice,
 * this list of conditions and the disclaimer below in the documentation
 * and/or other materials provided with the distribution.
 * 3. The name of IBM may not be used to endorse or promote products derived
 * from this software or in any other form without specific prior written
 * permission from IBM.
 * 4. Redistribution of any modified code must be labeled "Code derived from
 * the original OpenCard Framework".
 * 
 * THIS SOFTWARE IS PROVIDED BY IBM "AS IS" FREE OF CHARGE. IBM SHALL NOT BE
 * LIABLE FOR INFRINGEMENTS OF THIRD PARTIES RIGHTS BASED ON THIS SOFTWARE.  ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IBM DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THIS
 * SOFTWARE WILL MEET THE USER'S REQUIREMENTS OR THAT THE OPERATION OF IT WILL
 * BE UNINTERRUPTED OR ERROR-FREE.  IN NO EVENT, UNLESS REQUIRED BY APPLICABLE
 * LAW, SHALL IBM BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  ALSO, IBM IS UNDER NO OBLIGATION
 * TO MAINTAIN, CORRECT, UPDATE, CHANGE, MODIFY, OR OTHERWISE SUPPORT THIS
 * SOFTWARE.
 */

package com.ibm.opencard.terminal.pcsc10;

import opencard.core.terminal.CardTerminalFactory;
import opencard.core.terminal.CardTerminal;
import opencard.core.terminal.CardTerminalException;
import opencard.core.terminal.CardTerminalRegistry;
import opencard.core.util.Tracer;

/** <tt>CardTerminalFactory</tt> for PCSC card terminals.
  *
  * @@author  Stephan Breideneich (sbreiden@@de.ibm.com)<br>
  * Modified by Jean-Francois.GREZES-EXTERNAL@@gemplus.com (Tue, 6 Mar 2001)
  *    to allow spaces in PC/SC reader labels (using <space> tag).
  * @@version $Id: Pcsc10CardTerminalFactory.java,v 1.13 1999/10/22 07:31:14 pbendel Exp $
  *
  * @@see opencard.core.terminal.CardTerminalFactory
  */
public class Pcsc10CardTerminalFactory implements CardTerminalFactory {
  private Tracer itracer = new Tracer(this, Pcsc10CardTerminalFactory.class);

  /** The reference to the PCSC ResourceManager for this card terminal. */
  private OCFPCSC1 pcsc = null;

    /**
     * The terminal status constants and variable
     */
    static final byte            NONE = 0;
    static final byte            SHARED = 1;
    static final byte            EXCLUSIVE = 2;

    static final byte            PORT_NOTUSED = 0;
    static final byte            PORT_USED = 1;

    public static byte           terminalsStatus[][] = null;

    /**
     * The PCSC terminal list variable
     */
    public static String[]       terminals = null;

  /** Instantiate and initialize an <tt>Pcsc10TerminalFactory</tt>.
   *
   * @@exception CardTerminalException
   *                    Thrown when a problem occured.
   */
  public Pcsc10CardTerminalFactory()
    throws CardTerminalException {
    super();
    open();
  }

  /** create a specific <tt>CardTerminal</tt> object that knows how to handle
   *  a specific card terminal and register it to the CardTerminalRegistry.
   *  @@param     ctr
   *		 the CardTerminalRegistry for registration-process
   *  @@param     terminalInfo
   *             null - not needed for this factory
   *  @@see       opencard.core.terminal.CardTerminalFactory
   */
  public void createCardTerminals(CardTerminalRegistry ctr, String[] terminalInfo)
    throws CardTerminalException {

      // Compute list of terminals that are known by the PCSC ResourceManager
      if (terminals == null) {
	  terminals = ListReaders();
	  terminalsStatus = new byte[terminals.length][2];
      }

      // when no info on the properties line, then add all the terminals
      // that can be found in the PCSC ResourceManager:
      if (terminalInfo.length == 0) {
	  String[] terminals = ListReaders();
	  for (int i=0;i<terminals.length;i++) {
	      ctr.add(new Pcsc10CardTerminal(terminals[i],
					     "PCSC10",
					     "",
					     this,
					     i));
	  }
      } else {
	  // otherwise, only the terminals found in the PCSC ResourceManager
	  // that have been requested in the properties file:

	  String    wspace = " ";
	  boolean   readerRequestedAssigned = false;

	  // Search in the pcsc reader list to find a matched reader
	  for (int i = 0; i < terminals.length; i++) {

	      int index1 = 0;
	      int index2 = 0;

              //Buffer to keep the opencard.properties entry (TerminalType)
              String Buf = new String(terminalInfo[1]);
              //Resulting String after processing TerminalType parsing
              String OCFReader = new String();

	      // This routine replaces '<space>' by ' ', in order to
	      // allow for real spaces in the opencard.properties file
	      // when there are some in the PC/SC label.
              // Note: this code assumes the TerminalType can not begin
	      // nor end with <space>
              while((index2 = Buf.indexOf("<space>", index1)) != -1) {
                OCFReader += Buf.substring(index1, index2);
                OCFReader += " ";
                index1 = index2 + 7;
              }
              if(index1 != Buf.length())
                OCFReader += Buf.substring(index1, Buf.length());

/*            //This routine replaces '_' by ' ' and '__' by '_'
              char tmpChar;
              while(index1 < Buf.length()) {
                if((tmpChar = Buf.charAt(index1)) == '_') {
                  //if last character is '_', replace by ' ' and break
                  if(index1 == Buf.length() - 1) {
                    OCFReader += " ";
                    break;
                  }
                  //if '__', replace by '_'
                  if(Buf.charAt(index1 + 1) == '_') {
                    OCFReader += "_";
                    index1 += 2;
                  }
                  //if '_', replace by ' '
                  else {
                    OCFReader += " ";
                    index1++;
                  }
                }
                //if something else
                else {
                  OCFReader += tmpChar;
                  index1++;
                }
              }
*/

	      // reader names are considered case-insensitives, as in Windows
              if (terminals[i].toLowerCase().equals(OCFReader.toLowerCase())
		  && terminalsStatus[i][0] == PORT_NOTUSED) {
		  readerRequestedAssigned = true;

		  // add the CardTerminal to CardTerminalRegistry
		  ctr.add(new Pcsc10CardTerminal(terminals[i],
						 "PCSC10",
						 "",
						 this,
						 i));
		  terminalsStatus[i][0] = PORT_USED;

		  // reserve for future use
		  if (terminalInfo[2].equals("SHARED")) {
		      terminalsStatus[i][1] = SHARED;
		  } else {
		      terminalsStatus[i][1] = EXCLUSIVE;
		  }
	      } // if
	  } // for

	  if (!readerRequestedAssigned) {
	      throw new CardTerminalException("No reader found by PC/SC : "
					      + terminalInfo[0].toString()
					      + " "
					      + terminalInfo[1].toString()
					      + " "
					      + terminalInfo[2].toString());
	  }

      } // if (length == 0)
  }


  /** initialize the factory (setup the PC/SC-driver) */
  public void open()
    throws CardTerminalException {

    // factory already opened?
    if (pcsc == null) {
      try {
        itracer.debug("Pcsc10CardTerminalFactory", "connect to PCSC 1.0 resource manager");
        OCFPCSC1.loadLib();
        pcsc = new OCFPCSC1();
        itracer.debug("Pcsc10CardTerminalFactory", "Driver initialized");
      } catch (PcscException e) {
        throw new CardTerminalException("Pcsc10CardTerminalFactory: " + e.getMessage());
      }
    }
  }

    /** deinitialize the PC/SC-driver */
    public void close()
	throws CardTerminalException {

	for (int i = 0; i < terminalsStatus.length; i++) {
	    terminalsStatus[i][0] = PORT_NOTUSED;
	}

	pcsc = null;
    }

    /** deinitialize the specific PC/SC-driver */
    public void close(int port) throws CardTerminalException {

	terminalsStatus[port][0] = PORT_NOTUSED;
	pcsc = null;
    }

  /** get the actual PC/SC reader list
   *
   *  @@exception opencard.core.terminal.CardTerminalException
   *             thrown when error occured
   */
  protected String[] ListReaders() throws CardTerminalException
  {
    itracer.debug("Pcsc10CardTerminalFactory", "get reader list from PC/SC");
    String[] terminals = null;
    try {
      terminals = pcsc.SCardListReaders(null);
    } catch (PcscException e) {
      throw new CardTerminalException("Pcsc10CardTerminalFactory: " + e.getMessage());
    }
    return terminals;
  }

}

// $Log: Pcsc10CardTerminalFactory.java,v $
// Revision 1.13  1999/10/22 07:31:14  pbendel
// RFC 17-1 Terminal locking mechanism using lock handle
//
// Revision 1.12  1999/04/01 13:11:28  pbendel
// native browser support RFC-0005 (pbendel)
//
// Revision 1.11  1998/08/13 14:39:12  cvsusers
// *** empty log message ***
//
// Revision 1.10  1998/07/09 12:35:40  breid
// PTR117: parameter specification added
//
// Revision 1.9  1998/04/30 14:49:36  breid
// open() modified: now open() creates pcsc-object only at the first call
//
// Revision 1.8  1998/04/22 20:08:30  breid
// support for T0 implemented
//
// Revision 1.7  1998/04/14 16:17:04  breid
// createTerminal() removed
//
// Revision 1.6  1998/04/09 13:40:17  breid
// AutoConfigurationFeature added
//
// Revision 1.5  1998/04/08 17:45:42  breid
// *** empty log message ***
//
// Revision 1.4  1998/04/08 17:21:58  breid
// exceptions modified
//
// Revision 1.3  1998/04/08 16:28:41  breid
// createCardTerminals(), open(), close() added
//
// Revision 1.2  1998/04/08 12:02:15  breid
// tested with StockBroker
//
// Revision 1.1  1998/04/07 12:43:05  breid
// initial version
//

@


1.99
log
@Alpha Version with long APDU support and other features. Distributed 20/12/00
@
text
@d46 3
a48 1
  * @@author  Stephan Breideneich (sbreiden@@de.ibm.com)
d125 2
a126 3
	      int    index1 = terminals[i].indexOf(wspace) + 1;
	      int    index2 = terminals[i].lastIndexOf(wspace);
	      String str = terminals[i].substring(index1, index2);
d128 48
a175 1
	      if (str.equals(terminalInfo[1]) 
d183 1
a183 1
						 this, 
d197 1
a197 1
	      throw new CardTerminalException("No reader found by PC/SC : " 
d210 1
a210 1
  public void open() 
d227 1
a227 1
    public void close() 
d229 1
a229 1
	
d233 1
a233 1
	
d239 1
a239 1
	
@


1.0
log
@Official Version Distributed in OCF 1.2
@
text
@d57 17
d96 62
a157 5
    // add the terminals found in the PCSC ResourceManager
    String[] terminals = ListReaders();
    for (int i=0;i<terminals.length;i++) {
      ctr.add(new Pcsc10CardTerminal(terminals[i], "PCSC10", ""));
    }
d160 1
d178 10
a187 3
  /** deinitialize the PC/SC-driver */
  public void close() 
    throws CardTerminalException {
d189 6
a194 2
    pcsc = null;
  }
@
