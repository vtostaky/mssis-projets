/*
 * Copyright © 1997 - 1999 IBM Corporation.
 * 
 * Redistribution and use in source (source code) and binary (object code)
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 * 1. Redistributed source code must retain the above copyright notice, this
 * list of conditions and the disclaimer below.
 * 2. Redistributed object code must reproduce the above copyright notice,
 * this list of conditions and the disclaimer below in the documentation
 * and/or other materials provided with the distribution.
 * 3. The name of IBM may not be used to endorse or promote products derived
 * from this software or in any other form without specific prior written
 * permission from IBM.
 * 4. Redistribution of any modified code must be labeled "Code derived from
 * the original OpenCard Framework".
 * 
 * THIS SOFTWARE IS PROVIDED BY IBM "AS IS" FREE OF CHARGE. IBM SHALL NOT BE
 * LIABLE FOR INFRINGEMENTS OF THIRD PARTIES RIGHTS BASED ON THIS SOFTWARE.  ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IBM DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THIS
 * SOFTWARE WILL MEET THE USER'S REQUIREMENTS OR THAT THE OPERATION OF IT WILL
 * BE UNINTERRUPTED OR ERROR-FREE.  IN NO EVENT, UNLESS REQUIRED BY APPLICABLE
 * LAW, SHALL IBM BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  ALSO, IBM IS UNDER NO OBLIGATION
 * TO MAINTAIN, CORRECT, UPDATE, CHANGE, MODIFY, OR OTHERWISE SUPPORT THIS
 * SOFTWARE.
 */
 
package com.ibm.tools.rejar;

import java.io.*;
import java.util.*;
import java.awt.*;

public class ReJar extends Frame
{
    private String sourcePath;

	public ReJar(String sPath, String dPath)
	{
	    sourcePath = sPath;

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(6,6));
		setVisible(false);
		setSize(400,300);
		setBackground(new Color(-2171170));
		selectionPanel = new java.awt.Panel();
		selectionPanel.setLayout(new GridLayout(1,1,6,6));
		selectionPanel.setBounds(0,0,400,268);
		add("Center", selectionPanel);
		sourceFilePanel = new java.awt.Panel();
		sourceFilePanel.setLayout(new BorderLayout(0,0));
		sourceFilePanel.setBounds(0,0,197,268);
		selectionPanel.add(sourceFilePanel);
		sourceFileList = new java.awt.List(4);
		sourceFileList.setBounds(0,24,197,195);
		sourceFileList.setFont(new Font("Dialog", Font.PLAIN, 12));
		sourceFilePanel.add("Center", sourceFileList);
		lSourceFiles = new java.awt.Label("source directory",Label.CENTER);
		lSourceFiles.setBounds(0,0,400,24);
		lSourceFiles.setFont(new Font("Dialog", Font.BOLD, 14));
		sourceFilePanel.add("North", lSourceFiles);
		bInclude = new java.awt.Button();
		bInclude.setActionCommand("include");
		bInclude.setLabel("select >>");
		bInclude.setBounds(0,219,197,23);
		bInclude.setBackground(new Color(12632256));
		sourceFilePanel.add("South", bInclude);
		selectedFilesPanel = new java.awt.Panel();
		selectedFilesPanel.setLayout(new BorderLayout(0,0));
		selectedFilesPanel.setBounds(203,0,197,268);
		selectionPanel.add(selectedFilesPanel);
		lSelectedFiles = new java.awt.Label("selected JARs",Label.CENTER);
		lSelectedFiles.setBounds(0,0,197,24);
		lSelectedFiles.setFont(new Font("Dialog", Font.BOLD, 14));
		selectedFilesPanel.add("North", lSelectedFiles);
		selectedFileList = new java.awt.List(4);
		selectedFileList.setBounds(0,24,197,195);
		selectedFilesPanel.add("Center", selectedFileList);
		bRemove = new java.awt.Button();
		bRemove.setActionCommand("remove");
		bRemove.setLabel("<< deselect");
		bRemove.setBounds(0,219,197,23);
		bRemove.setBackground(new Color(12632256));
		selectedFilesPanel.add("South", bRemove);
		commandPanel = new java.awt.Panel();
		commandPanel.setLayout(new GridLayout(2,1,0,6));
		commandPanel.setBounds(0,248,400,26);
		add("South", commandPanel);
		destinationFilePanel = new java.awt.Panel();
		destinationFilePanel.setLayout(new BorderLayout(0,0));
		destinationFilePanel.setBounds(0,0,400,23);
		commandPanel.add(destinationFilePanel);
		lDestFile = new java.awt.Label("new JAR file:");
		lDestFile.setBounds(0,0,84,23);
		destinationFilePanel.add("West", lDestFile);
		txtNewJarFile = new java.awt.TextField();
		txtNewJarFile.setBounds(84,0,316,23);
		destinationFilePanel.add("Center", txtNewJarFile);
		buttonPanel = new java.awt.Panel();
		buttonPanel.setLayout(new BorderLayout(0,0));
		buttonPanel.setBounds(0,29,400,23);
		commandPanel.add(buttonPanel);
		functionPanel = new java.awt.Panel();
		functionPanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,0));
		functionPanel.setBounds(0,0,0,23);
		buttonPanel.add("West", functionPanel);
		bCreate = new java.awt.Button();
		bCreate.setActionCommand("create");
		bCreate.setLabel("create JAR file");
		bCreate.setBounds(0,0,92,23);
		bCreate.setBackground(new Color(12632256));
		functionPanel.add(bCreate);
		exitPanel = new java.awt.Panel();
		exitPanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,0));
		exitPanel.setBounds(367,0,0,23);
		buttonPanel.add("East", exitPanel);
		exitButton = new java.awt.Button();
		exitButton.setActionCommand("exit");
		exitButton.setLabel("Exit");
		exitButton.setBounds(0,0,33,23);
		exitButton.setBackground(new Color(12632256));
		exitPanel.add(exitButton);
		setTitle("ReJar");
		//}}

		txtNewJarFile.setText(dPath);
		initJarFileList(new File(sourcePath));

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		bInclude.addActionListener(lSymAction);
		bRemove.addActionListener(lSymAction);
		bCreate.addActionListener(lSymAction);
		exitButton.addActionListener(lSymAction);
		//}}
	}

	public ReJar(String sPath, String dPath, String title)
	{
		this(sPath, dPath);

		setTitle(title);
	}

    public static void main(String[] args)
    {
        String sourcePath = null;
        String destFile = null;

        if (args.length == 0) {
          System.err.println("usage: java com.ibm.tools.rejar.ReJar [path with jarfiles] [new jarfile]\n");
          System.err.println("The second parameter (new jarfile) is optional.");
          System.exit(1);
        }

        if (args.length > 0) {
            sourcePath = args[0];
            if (!(new File(sourcePath)).isDirectory()) {
              System.err.println("source path invalid: " + sourcePath);
              System.exit(2);
            }
        }

        if (args.length > 1) 
            destFile = args[1];            
        
        ReJar dialog = new ReJar(sourcePath, destFile);
        dialog.setVisible(true);
    }

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
		    Dimension screen = getToolkit().getScreenSize();
			setLocation((screen.width - getSize().width) / 2,
			            (screen.height - getSize().height) / 2);
		}
		super.setVisible(b);
	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Panel selectionPanel;
	java.awt.Panel sourceFilePanel;
	java.awt.List sourceFileList;
	java.awt.Label lSourceFiles;
	java.awt.Button bInclude;
	java.awt.Panel selectedFilesPanel;
	java.awt.Label lSelectedFiles;
	java.awt.List selectedFileList;
	java.awt.Button bRemove;
	java.awt.Panel commandPanel;
	java.awt.Panel destinationFilePanel;
	java.awt.Label lDestFile;
	java.awt.TextField txtNewJarFile;
	java.awt.Panel buttonPanel;
	java.awt.Panel functionPanel;
	java.awt.Button bCreate;
	java.awt.Panel exitPanel;
	java.awt.Button exitButton;
	//}}
	FramePanel listFrame;

	//{{DECLARE_MENUS
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ReJar.this)
                System.exit(0);
		}
	}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
            if (object == bInclude)
				bInclude_ActionPerformed(event);
			else if (object == bRemove)
				bRemove_ActionPerformed(event);
			else if (object == bCreate)
				bCreate_ActionPerformed(event);
			else if (object == exitButton)
				exitButton_ActionPerformed(event);
		}
	}

	void mnuFileExit_ActionPerformed(java.awt.event.ActionEvent event)
	{
		String command = event.getActionCommand();
		if (command.equals("Exit"))
		    System.exit(0);
	}

	void initJarFileList(File sPath)
	{
	    if (!sPath.isDirectory())
	        return;

        String[] files = sPath.list(new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    return name.toLowerCase().endsWith(".jar");
                }
            });
        for (int i=0; i<files.length; i++)
            sourceFileList.add(files[i]);
	}

	void includeSelectedFile()
	{
	    String selectedFile = sourceFileList.getSelectedItem();
	    if (selectedFile != null)
        {
            sourceFileList.remove(selectedFile);
            selectedFileList.add(selectedFile);
        }
	}

	void removeSelectedFile()
	{
	    String selectedFile = selectedFileList.getSelectedItem();
	    if (selectedFile != null)
        {
            selectedFileList.remove(selectedFile);
            sourceFileList.add(selectedFile);
        }
	}

	void bInclude_ActionPerformed(java.awt.event.ActionEvent event)
	{
		String command = event.getActionCommand();
		if (command.equals("include"))
		    includeSelectedFile();
	}

	void bRemove_ActionPerformed(java.awt.event.ActionEvent event)
	{
		String command = event.getActionCommand();
		if (command.equals("remove"))
		    removeSelectedFile();
	}

	void bCreate_ActionPerformed(java.awt.event.ActionEvent event)
	{
        String command = event.getActionCommand();

        if (command.equals("create")) {
            ProcessFrame p = new ProcessFrame();
            p.makeNewJarFile(sourcePath, txtNewJarFile.getText(), selectedFileList.getItems());
        }
	}

	class FramePanel extends Panel {
      public void paint(Graphics g) {
		g.drawRect(0,0,getBounds().width,getBounds().height);
      };
	}

	void exitButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
        String command = event.getActionCommand();
        if (command.equals("exit"))
            System.exit(0);
	}

	void bProcess_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Create and show the Frame
		(new ProcessFrame()).setVisible(true);
		//}}
	}
}